name: Extract TAR.GZ Files Only
 
on:
  workflow_dispatch: # 允许手动运行 Workflow
 
jobs:
  extract_targz:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
 
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
 
      - name: Check for existing log file
        run: |
          # 如果有旧的processed_zips.log，重命名为processed_archives.log
          if [ -f ".processed_zips.log" ] && [ ! -f ".processed_archives.log" ]; then
            mv .processed_zips.log .processed_archives.log
            echo "Renamed .processed_zips.log to .processed_archives.log"
            git add .processed_archives.log
            git commit -m "Rename log file to support multiple archive types" || true
            git push origin main || true
          fi
          
          # 如果没有任何日志文件，创建新的
          if [ ! -f ".processed_archives.log" ]; then
            echo "# Processed archive files" > .processed_archives.log
            echo "# Format: timestamp|archive_path|extracted_files_count|skipped_files" >> .processed_archives.log
            git add .processed_archives.log
            git commit -m "Initialize processed archives log" || true
            git push origin main || true
          fi
 
      - name: Extract TAR.GZ Files One by One
        run: |
          # 设置最大文件大小 (100MB)
          MAX_SIZE=$((100 * 1024 * 1024))
          
          # 只查找tar.gz和tgz文件
          find . -type f \( -name "*.tar.gz" -o -name "*.tgz" \) ! -path "./.processed_archives.log" | sort | while read archive_file; do
            # 检查是否已经处理过
            if grep -q "$(echo "$archive_file" | sed 's|/|\\/|g')" .processed_archives.log; then
              echo "Already processed: $archive_file, skipping"
              continue
            fi
            
            echo "Processing: $archive_file"
            
            # 获取文件名（不含扩展名）用于commit message
            filename=$(basename "$archive_file")
            # 移除.tar.gz或.tgz扩展名
            filename_clean=$(echo "$filename" | sed 's/\.\(tar\.gz\|tgz\)$//')
            
            # 记录处理前状态
            before_count=$(find . -type f ! -name "*.zip" ! -name "*.tar.gz" ! -name "*.tgz" ! -name ".processed_archives.log" | wc -l)
            
            # 解压tar.gz文件
            echo "Extracting TAR.GZ: $archive_file"
            tar -xzf "$archive_file" -C "$(dirname "$archive_file")"
            
            # 获取解压后的文件大小和数量
            large_files=""
            new_files=$(find "$(dirname "$archive_file")" -type f -newer "$archive_file" ! -name "*.zip" ! -name "*.tar.gz" ! -name "*.tgz" ! -name ".processed_archives.log")
            
            if [ -n "$new_files" ]; then
              echo "$new_files" | while read file; do
                file_size=$(stat -c%s "$file")
                
                if [ $file_size -gt $MAX_SIZE ]; then
                  echo "Large file found: $(basename "$file") ($(du -h "$file" | cut -f1))"
                  large_files="$large_files$(basename "$file")|"
                fi
              done
            fi
            
            # 添加所有变更到暂存区
            git add .
            
            # 如果有大文件，从暂存区移除它们
            if [ -n "$large_files" ]; then
              echo "Removing large files from staging area..."
              echo "$large_files" | tr '|' '\n' | while read -r large_file; do
                if [ -n "$large_file" ]; then
                  echo "Skipping: $large_file"
                  git reset HEAD "$(dirname "$archive_file")/$large_file"
                fi
              done
            fi
            
            # 检查暂存区是否有变更
            if ! git diff --cached --quiet; then
              echo "Committing files from $filename_clean..."
              
              # 构建commit message
              commit_msg="Extracted: $filename_clean (tar.gz"
              if [ -n "$large_files" ]; then
                skipped_count=$(echo "$large_files" | tr '|' '\n' | grep -v '^$' | wc -l)
                commit_msg="$commit_msg, skipped $skipped_count large files)"
              else
                commit_msg="$commit_msg)"
              fi
              
              # 提交变更
              git commit -m "$commit_msg"
              
              # 推送变更，添加重试机制
              max_retries=3
              retry_count=0
              
              while [ $retry_count -lt $max_retries ]; do
                if git push origin main; then
                  echo "Successfully pushed $filename_clean"
                  break
                else
                  retry_count=$((retry_count + 1))
                  echo "Push failed, retry $retry_count/$max_retries"
                  
                  # 拉取最新变更并重置
                  git pull origin main --rebase
                  
                  # 如果是最后一次重试失败，强制推送
                  if [ $retry_count -eq $max_retries ]; then
                    echo "Force pushing as last resort"
                    git push origin main --force
                  fi
                  
                  # 等待一段时间再重试
                  sleep 10
                fi
              done
            else
              echo "No new files to commit from $filename_clean"
            fi
            
            # 计算实际提取的文件数量
            extracted_count=$(find "$(dirname "$archive_file")" -type f -newer "$archive_file" ! -name "*.zip" ! -name "*.tar.gz" ! -name "*.tgz" ! -name ".processed_archives.log" | wc -l)
            
            # 记录已处理的文件
            timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            skipped_info=$(echo "$large_files" | tr '|' '\n' | grep -v '^$' | wc -l)
            echo "$timestamp|$archive_file|$extracted_count|$skipped_info" >> .processed_archives.log
            git add .processed_archives.log
            git commit -m "Log: Processed $filename_clean (extracted: $extracted_count, skipped: $skipped_info)" || true
            git push origin main || true
            
            # 短暂等待，避免GitHub API限制
            sleep 2
          done
          
      - name: Summary
        run: |
          echo "TAR.GZ extraction process completed!"
          
          echo "=== Archive Files Found ==="
          echo "TAR.GZ files remaining:"
          find . -name "*.tar.gz" | wc -l
          echo "TGZ files remaining:"
          find . -name "*.tgz" | wc -l
          
          echo ""
          echo "=== Large Files Skipped ==="
          find . -type f ! -name "*.zip" ! -name "*.tar.gz" ! -name "*.tgz" ! -name ".processed_archives.log" -size +100M 2>/dev/null || echo "No large files found"
          
          echo ""
          echo "=== Processing Log ==="
          echo "Last 10 processed files:"
          tail -n 11 .processed_archives.log | grep -v "^#"
          
          echo ""
          echo "=== Repository Status ==="
          git status
          
          echo ""
          echo "=== Unprocessed TAR.GZ Files ==="
          find . -type f \( -name "*.tar.gz" -o -name "*.tgz" \) | while read archive_file; do
            if ! grep -q "$(echo "$archive_file" | sed 's|/|\\/|g')" .processed_archives.log; then
              echo "$archive_file"
            fi
          done
 
      - name: Generate TAR.GZ Processing Report
        run: |
          echo "# TAR.GZ Processing Report" > targz_processing_report.md
          echo "Generated on: $(date)" >> targz_processing_report.md
          echo "" >> targz_processing_report.md
          
          echo "## TAR.GZ Files Status" >> targz_processing_report.md
          echo "- TAR.GZ files remaining: $(find . -name "*.tar.gz" | wc -l)" >> targz_processing_report.md
          echo "- TGZ files remaining: $(find . -name "*.tgz" | wc -l)" >> targz_processing_report.md
          echo "- Archives processed: $(grep -c "|" .processed_archives.log 2>/dev/null || echo "0")" >> targz_processing_report.md
          echo "" >> targz_processing_report.md
          
          echo "## Large Files Skipped (>100MB)" >> targz_processing_report.md
          echo "" >> targz_processing_report.md
          
          large_files_count=0
          find . -type f ! -name "*.zip" ! -name "*.tar.gz" ! -name "*.tgz" ! -name ".processed_archives.log" -size +100M 2>/dev/null | while read file; do
            echo "- \`$(basename "$file")\`: $(du -h "$file" | cut -f1)" >> targz_processing_report.md
            large_files_count=$((large_files_count + 1))
          done
          
          if [ $large_files_count -eq 0 ]; then
            echo "No large files found." >> targz_processing_report.md
          fi
          
          echo "" >> targz_processing_report.md
          echo "## Recent Processing History" >> targz_processing_report.md
          echo "Last 5 processed files:" >> targz_processing_report.md
          echo "" >> targz_processing_report.md
          tail -n 6 .processed_archives.log | grep -v "^#" | while read line; do
            if [ -n "$line" ]; then
              timestamp=$(echo "$line" | cut -d'|' -f1)
              filepath=$(echo "$line" | cut -d'|' -f2)
              extracted=$(echo "$line" | cut -d'|' -f3)
              skipped=$(echo "$line" | cut -d'|' -f4)
              filename=$(basename "$filepath")
              echo "- \`$filename\`: $extracted files extracted, $skipped files skipped ($timestamp)" >> targz_processing_report.md
            fi
          done
          
          git add targz_processing_report.md
          git commit -m "Update TAR.GZ processing report" || true
          git push origin main || true
