name: Extract TAR.GZ Files Only
 
on:
  workflow_dispatch:
 
jobs:
  extract_targz:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
 
      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
 
      - name: Extract TAR.GZ Files One by One
        run: |
          # 设置最大文件大小 (100MB)
          MAX_SIZE=$((100 * 1024 * 1024))
          
          # 查找所有tar.gz和tgz文件
          find . -type f \( -name "*.tar.gz" -o -name "*.tgz" \) | sort | while read archive_file; do
            echo "=== Processing: $archive_file ==="
            
            # 获取文件名（不含扩展名）
            filename=$(basename "$archive_file")
            filename_clean=$(echo "$filename" | sed 's/\.\(tar\.gz\|tgz\)$//')
            
            # 解压到临时目录
            temp_dir="temp_extract_$(date +%s)"
            mkdir -p "$temp_dir"
            
            echo "Extracting TAR.GZ to temporary directory..."
            tar -xzf "$archive_file" -C "$temp_dir"
            
            # 检查并过滤大文件
            large_files_count=0
            small_files_count=0
            
            echo "Checking file sizes..."
            find "$temp_dir" -type f | while read file; do
              file_size=$(stat -c%s "$file")
              
              if [ $file_size -gt $MAX_SIZE ]; then
                echo "SKIPPING large file: $(basename "$file") ($(du -h "$file" | cut -f1))"
                rm -f "$file"
                large_files_count=$((large_files_count + 1))
              else
                echo "KEEPING small file: $(basename "$file") ($(du -h "$file" | cut -f1))"
                small_files_count=$((small_files_count + 1))
              fi
            done
            
            # 移动小文件到目标位置
            if [ -d "$temp_dir" ] && [ "$(ls -A "$temp_dir" 2>/dev/null)" ]; then
              echo "Moving small files to repository..."
              find "$temp_dir" -type f | while read file; do
                relative_path="${file#$temp_dir/}"
                target_path="$(dirname "$archive_file")/$relative_path"
                
                # 创建目标目录
                mkdir -p "$(dirname "$target_path")"
                
                # 移动文件
                mv "$file" "$target_path"
                echo "Moved: $relative_path"
              done
            else
              echo "No files to move (all were too large)"
            fi
            
            # 清理临时目录
            rm -rf "$temp_dir"
            
            # 添加变更到Git
            git add .
            
            # 检查是否有变更
            if ! git diff --cached --quiet; then
              echo "Committing changes from $filename_clean..."
              
              # 构建commit message
              commit_msg="Extracted: $filename_clean (tar.gz"
              if [ $large_files_count -gt 0 ]; then
                commit_msg="$commit_msg, skipped $large_files_count large files)"
              else
                commit_msg="$commit_msg)"
              fi
              
              echo "Commit message: $commit_msg"
              git commit -m "$commit_msg"
              
              # 推送变更
              echo "Pushing to repository..."
              if git push origin main; then
                echo "Successfully pushed $filename_clean"
              else
                echo "Push failed, trying to resolve..."
                
                # 检查是否有大文件被意外添加
                git diff --cached --name-only | while read cached_file; do
                  if [ -f "$cached_file" ]; then
                    file_size=$(stat -c%s "$cached_file")
                    if [ $file_size -gt $MAX_SIZE ]; then
                      echo "ERROR: Large file found in staging: $cached_file ($(du -h "$cached_file" | cut -f1))"
                      git reset HEAD "$cached_file"
                      rm -f "$cached_file"
                      echo "Removed large file from staging: $cached_file"
                    fi
                  fi
                done
                
                # 重新提交（如果有剩余文件）
                if ! git diff --cached --quiet; then
                  git commit -m "$commit_msg (fixed large files)"
                fi
                
                # 拉取并重试推送
                git pull origin main --rebase
                git push origin main || {
                  echo "Final push attempt..."
                  git push origin main --force
                }
              fi
            else
              echo "No new files to commit from $filename_clean"
            fi
            
            # 删除已处理的压缩文件
            echo "Removing processed archive: $archive_file"
            rm -f "$archive_file"
            git add "$archive_file"
            git commit -m "Remove processed archive: $filename_clean" || true
            git push origin main || true
            
            echo "=== Completed: $filename_clean ==="
            sleep 2
          done
 
      - name: Final Status
        run: |
          echo "=== Extraction Summary ==="
          echo "TAR.GZ files remaining: $(find . -name "*.tar.gz" | wc -l)"
          echo "TGZ files remaining: $(find . -name "*.tgz" | wc -l)"
          
          echo ""
          echo "=== Repository Status ==="
          git status
          
          echo ""
          echo "=== Check for any large files ==="
          MAX_SIZE=$((100 * 1024 * 1024))
          large_files=$(find . -type f -size +${MAX_SIZE}c ! -path "./.git/*")
          if [ -n "$large_files" ]; then
            echo "WARNING: Found large files:"
            echo "$large_files" | while read file; do
              echo "$file ($(du -h "$file" | cut -f1))"
            done
          else
            echo "No large files found - all clear!"
          fi
