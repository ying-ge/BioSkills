# .github/workflows/sync-from-figureya.yml
name: Sync Packages from FigureYa
 
on:
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Force update all packages'
        required: false
        default: 'false'
        type: boolean
 
jobs:
  sync-packages:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.FIGUREYA2ACTION }}
    
    - name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 'release'
    
    - name: Install dependencies
      shell: Rscript {0}
      run: |
        install.packages(c("rvest", "stringr", "jsonlite", "httr"))
    
    - name: Test token access
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.FIGUREYA2ACTION }}
      run: |
        echo "Testing GitHub API access..."
        curl -H "Authorization: token $GITHUB_TOKEN" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/ying-ge/FigureYa
    
    - name: Create and run extraction script
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.FIGUREYA2ACTION }}
      run: |
        mkdir -p metadata
        
        cat > extract_simple.R << 'EOF'
        library(httr)
        library(jsonlite)
        
        GITHUB_TOKEN <- Sys.getenv("GITHUB_TOKEN")
        
        cat("Token available:", nchar(GITHUB_TOKEN) > 0, "\n")
        
        # 测试API访问
        headers <- list(Authorization = paste("token", GITHUB_TOKEN))
        response <- GET("https://api.github.com/repos/ying-ge/FigureYa", add_headers(.headers = headers))
        
        cat("API Status:", status_code(response), "\n")
        
        if(status_code(response) == 200) {
          repo_info <- content(response)
          cat("Repository:", repo_info$full_name, "\n")
          cat("Stars:", repo_info$stargazers_count, "\n")
        }
        
        # 创建示例输出
        sample_data <- list(
          packages = list(
            ggplot2 = list(version = "3.4.0", source = "CRAN")
          ),
          metadata = list(
            extraction_date = Sys.time(),
            test_run = TRUE
          )
        )
        
        writeLines(toJSON(sample_data, pretty = TRUE), "metadata/test_output.json")
        cat("Created test output file\n")
        EOF
        
        Rscript extract_simple.R
    
    - name: Check results and commit
      shell: bash
      run: |
        if [ -f "metadata/test_output.json" ]; then
          echo "✅ Script executed successfully"
          cat metadata/test_output.json
        else
          echo "❌ Script failed"
          exit 1
        fi
        
        git config user.email "action@github.com"
        git config user.name "GitHub Action"
        git add .
        git commit -m "Test run $(date)" || echo "No changes to commit"
        git push
