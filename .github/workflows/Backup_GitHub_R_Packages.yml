name: Backup GitHub R Packages (Fixed)
 
on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 0"
 
permissions:
  contents: write
  actions: read
 
jobs:
  backup-packages:
    runs-on: ubuntu-latest
    
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
 
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
 
    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: "4.3"
        use-public-rspm: true
 
    - name: Install R dependencies
      run: |
        Rscript -e "install.packages(c('jsonlite', 'httr'), repos='https://cloud.r-project.org/')"
 
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
 
    - name: Prepare repository list
      run: |
        echo "🔍 准备仓库列表..."
        
        # 直接创建仓库列表文件
        cat > repo_list.txt << 'EOF'
        tpq/kpmt
        cBioPortal/cgdsr
        satijalab/seurat-data
        jespermaag/gganatogram
        chrisamiller/fishplot
        BITS-VIB/venn-tools
        FredHutch/Galeano-Nino-Bullman-Intratumoral-Microbiota_2022
        Gibbsdavidl/Immune-Subtype-Clustering
        Gibbsdavidl/ImmuneSubtypeClassifier
        GuangchuangYu/gglayer
        IOBR/IOBR
        IndrajeetPatil/ggstatsplot
        KrishnaswamyLab/MAGIC
        NKI-CCB/DISCOVER
        Simon-Coetzee/motifBreakR
        Teichlab/cellphonedb
        YuLab-SMU/clusterProfiler-book
        aertslab/pySCENIC
        califano-lab/ARACNe-AP
        cole-trapnell-lab/monocle-release
        cran/colorfulVennPlot
        dylkot/cNMF
        ebecht/MCPcounter
        fawda123/ggord
        icbi-lab/Immunophenogram
        inutano/pfastq-dump
        johncolby/SVM-RFE
        linnarsson-lab/ipynb-lamanno2016
        lmcinnes/umap
        matanhofree/crc-immune-hubs
        matt-black/dcapy
        mg14/mg14
        nicholasehamilton/ggtern
        paulgeeleher/pRRophetic
        paulgeeleher/pRRophetic2
        peterawe/CMScaller
        raerose01/deconstructSigs
        rfordatascience/tidytuesday
        richie2019/MBpanel
        ropensci/rentrez
        rsankowski/sankowski-et-al-microglia
        spren9er/tidytuesday
        taoliu/MACS
        wanyewang1/Index_model
        woobe/rPlotter
        xlucpu/MOVICS
        zzwch/crosslink
        EOF
        
        echo "✅ 创建了包含 $(wc -l < repo_list.txt) 个仓库的列表"
        echo "📄 前5个仓库:"
        head -5 repo_list.txt
 
    - name: Run backup script
      run: |
        # 创建简化的R脚本
        cat > simple_backup.R << 'EOF'
        # 加载必要的包
        suppressMessages({
          library(jsonlite)
          library(httr)
        })
        
        # 设置GitHub token
        github_token <- Sys.getenv("GITHUB_PAT")
        if (nchar(github_token) > 0) {
          httr::set_config(httr::add_headers(Authorization = paste("token", github_token)))
        }
        
        # 读取仓库列表
        repo_file <- "repo_list.txt"
        if (!file.exists(repo_file)) {
          stop("仓库列表文件不存在")
        }
        
        lines <- readLines(repo_file, warn = FALSE)
        repos <- lines[nchar(trimws(lines)) > 0 & !grepl("^#", lines)]
        repos <- trimws(repos)
        
        cat("找到", length(repos), "个仓库\n")
        
        # 创建备份目录
        backup_dir <- "R_packages_backup"
        if (!dir.exists(backup_dir)) {
          dir.create(backup_dir, recursive = TRUE)
        }
        
        # 初始化结果记录
        results <- data.frame(
          repo = character(),
          status = character(),
          file_size_mb = numeric(),
          date = character(),
          stringsAsFactors = FALSE
        )
        
        # 逐个处理仓库
        for (i in seq_along(repos)) {
          repo <- repos[i]
          cat(sprintf("\n[%d/%d] 处理: %s\n", i, length(repos), repo))
          
          # 创建仓库目录
          repo_name <- gsub("/", "_", repo)
          repo_dir <- file.path(backup_dir, repo_name)
          
          if (dir.exists(repo_dir)) {
            unlink(repo_dir, recursive = TRUE)
          }
          dir.create(repo_dir)
          
          # 初始化结果
          result <- data.frame(
            repo = repo,
            status = "failed",
            file_size_mb = 0,
            date = as.character(Sys.Date()),
            stringsAsFactors = FALSE
          )
          
          # 尝试下载
          tryCatch({
            # 尝试master和main分支
            branches <- c("master", "main")
            downloaded <- FALSE
            
            for (branch in branches) {
              zip_url <- sprintf("https://github.com/%s/archive/refs/heads/%s.zip", repo, branch)
              zip_file <- file.path(repo_dir, sprintf("%s_%s.zip", repo_name, branch))
              
              tryCatch({
                download.file(zip_url, zip_file, mode = "wb", quiet = TRUE)
                
                if (file.exists(zip_file) && file.size(zip_file) > 1000) {
                  file_size_mb <- file.size(zip_file) / (1024^2)
                  
                  # 检查文件大小
                  if (file_size_mb > 100) {
                    cat(sprintf("⚠️ 文件过大: %.1f MB\n", file_size_mb))
                    result$status <- sprintf("skipped_large_%.1fMB", file_size_mb)
                    result$file_size_mb <- file_size_mb
                    file.remove(zip_file)
                  } else {
                    cat(sprintf("✅ 下载成功: %.1f MB\n", file_size_mb))
                    result$status <- "success"
                    result$file_size_mb <- round(file_size_mb, 2)
                    downloaded <- TRUE
                    
                    # 获取仓库信息
                    if (nchar(github_token) > 0) {
                      tryCatch({
                        api_url <- sprintf("https://api.github.com/repos/%s", repo)
                        response <- httr::GET(api_url)
                        if (httr::status_code(response) == 200) {
                          repo_info <- httr::content(response, "text", encoding = "UTF-8")
                          writeLines(repo_info, file.path(repo_dir, "repo_info.json"))
                        }
                      }, error = function(e) NULL)
                    }
                  }
                  break
                }
              }, error = function(e) NULL)
            }
            
            if (!downloaded && result$status == "failed") {
              cat("❌ 下载失败\n")
              unlink(repo_dir, recursive = TRUE)
            }
            
          }, error = function(e) {
            cat("❌ 错误:", e$message, "\n")
            result$status <- paste("error:", e$message)
            unlink(repo_dir, recursive = TRUE)
          })
          
          # 记录结果
          results <- rbind(results, result)
          
          # 保存进度
          writeLines(paste(repo, result$status, result$file_size_mb, sep = "|"), "progress.txt")
          
          # 每5个仓库暂停一下
          if (i %% 5 == 0) {
            Sys.sleep(1)
          }
        }
        
        # 保存最终结果
        write.csv(results, file.path(backup_dir, paste0("backup_log_", Sys.Date(), ".csv")), row.names = FALSE)
        
        # 统计结果
        success_count <- sum(results$status == "success")
        skipped_count <- sum(grepl("skipped_large", results$status))
        failed_count <- nrow(results) - success_count - skipped_count
        total_size <- sum(results$file_size_mb[results$status == "success"])
        
        cat("\n=== 最终统计 ===\n")
        cat("成功:", success_count, "\n")
        cat("跳过(大文件):", skipped_count, "\n")
        cat("失败:", failed_count, "\n")
        cat("总大小:", round(total_size, 1), "MB\n")
        
        # 保存统计
        writeLines(paste(success_count, skipped_count, failed_count, round(total_size, 1), sep = "|"), "final_summary.txt")
        
        cat("备份完成！\n")
        EOF
        
        # 运行R脚本
        echo "🚀 开始备份..."
        Rscript simple_backup.R &
        r_pid=$!
        
        # 监控进度
        last_progress=""
        while kill -0 $r_pid 2>/dev/null; do
          if [ -f "progress.txt" ]; then
            current_progress=$(cat progress.txt 2>/dev/null || echo "")
            if [ "$current_progress" != "$last_progress" ] && [ -n "$current_progress" ]; then
              repo_name=$(echo "$current_progress" | cut -d'|' -f1)
              status=$(echo "$current_progress" | cut -d'|' -f2)
              size=$(echo "$current_progress" | cut -d'|' -f3)
              
              echo "📦 完成: $repo_name ($status)"
              
              # 如果成功，立即提交
              if [ "$status" = "success" ]; then
                repo_dir_name=$(echo "$repo_name" | sed 's/\//_/g')
                if [ -d "R_packages_backup/$repo_dir_name" ]; then
                  echo "💾 提交 $repo_name..."
                  git add "R_packages_backup/$repo_dir_name/"
                  git add "R_packages_backup/"*.csv 2>/dev/null || true
                  
                  if git commit -m "📦 Add $repo_name (${size}MB) - $(date +'%m-%d %H:%M')"; then
                    if git push origin main; then
                      echo "✅ $repo_name 推送成功"
                    else
                      echo "⚠️ $repo_name 推送失败"
                    fi
                  fi
                fi
              fi
              
              last_progress="$current_progress"
            fi
          fi
          sleep 2
        done
        
        # 等待R脚本完成
        wait $r_pid
        echo "🎉 备份脚本完成"
        
        # 最终提交
        git add R_packages_backup/ 2>/dev/null || true
        git commit -m "📊 Final backup update - $(date +'%Y-%m-%d')" 2>/dev/null || true
        git push origin main 2>/dev/null || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
 
    - name: Show final summary
      if: always()
      run: |
        if [ -f "final_summary.txt" ]; then
          summary=$(cat final_summary.txt)
          success=$(echo "$summary" | cut -d'|' -f1)
          skipped=$(echo "$summary" | cut -d'|' -f2)
          failed=$(echo "$summary" | cut -d'|' -f3)
          total_size=$(echo "$summary" | cut -d'|' -f4)
          
          echo "## 📊 备份结果 - $(date +'%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 状态 | 数量 |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ 成功 | $success |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚠️ 跳过(>100MB) | $skipped |" >> $GITHUB_STEP_SUMMARY
          echo "| ❌ 失败 | $failed |" >> $GITHUB_STEP_SUMMARY
          echo "| 💾 总大小 | ${total_size}MB |" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ 备份异常" >> $GITHUB_STEP_SUMMARY
          echo "未找到结果文件" >> $GITHUB_STEP_SUMMARY
        fi
        
        # 显示备份目录信息
        if [ -d "R_packages_backup" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 备份目录" >> $GITHUB_STEP_SUMMARY
          echo "- 目录数: $(find R_packages_backup -maxdepth 1 -type d | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- 文件数: $(find R_packages_backup -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- 磁盘使用: $(du -sh R_packages_backup | cut -f1)" >> $GITHUB_STEP_SUMMARY
        fi
