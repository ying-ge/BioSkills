% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_progress_summary.R
\name{tar_progress_summary}
\alias{tar_progress_summary}
\title{Summarize target progress.}
\usage{
tar_progress_summary(
  fields = c("skipped", "dispatched", "completed", "errored", "canceled", "since"),
  store = targets::tar_config_get("store")
)
}
\arguments{
\item{fields}{Optional character vector of names of progress data
columns to read. Set to \code{NULL} to read all fields.}

\item{store}{Character of length 1, path to the
\code{targets} data store. Defaults to \code{tar_config_get("store")},
which in turn defaults to \verb{_targets/}.
When you set this argument, the value of \code{tar_config_get("store")}
is temporarily changed for the current function call.
See \code{\link[=tar_config_get]{tar_config_get()}} and \code{\link[=tar_config_set]{tar_config_set()}} for details
about how to set the data store path persistently
for a project.}
}
\value{
A data frame with one row and the following
optional columns that can be selected with \code{fields}.
(\code{time} is omitted by default.)
\itemize{
\item \code{dispatched}: number of targets that were sent off to run and
did not (yet) finish. These targets may not actually be running,
depending on the status and workload of parallel workers.
\item \code{completed}: number of targets that completed without
error or cancellation.
\item \code{errored}: number of targets that threw an error.
\item \code{canceled}: number of canceled targets (see \code{\link[=tar_cancel]{tar_cancel()}}).
\item \code{since}: how long ago progress last changed (\code{Sys.time() - time}).
\item \code{time}: the time when the progress last changed
(modification timestamp of the \verb{_targets/meta/progress} file).
}
}
\description{
Summarize the progress of a run of the pipeline.
}
\examples{
if (identical(Sys.getenv("TAR_EXAMPLES"), "true")) { # for CRAN
tar_dir({ # tar_dir() runs code from a temp dir for CRAN.
tar_script({
  library(targets)
  library(tarchetypes)
  list(
    tar_target(x, seq_len(2)),
    tar_target(y, x, pattern = map(x)),
    tar_target(z, stopifnot(y < 1.5), pattern = map(y), error = "continue")
  )
}, ask = FALSE)
try(tar_make())
tar_progress_summary()
})
}
}
\seealso{
Other progress: 
\code{\link{tar_canceled}()},
\code{\link{tar_completed}()},
\code{\link{tar_dispatched}()},
\code{\link{tar_errored}()},
\code{\link{tar_poll}()},
\code{\link{tar_progress}()},
\code{\link{tar_progress_branches}()},
\code{\link{tar_skipped}()},
\code{\link{tar_watch}()},
\code{\link{tar_watch_server}()},
\code{\link{tar_watch_ui}()}
}
\concept{progress}
